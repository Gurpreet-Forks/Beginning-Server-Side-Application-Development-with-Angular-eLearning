***Topic B: Adding Dependencies for the Server App - Exercise-Add dependencies for the server app***

Step 2

import 'zone.js/dist/zone-node';
import 'reflect-metadata';

import { enableProdMode } from '@angular/core';
import { environment } from './environments/environment';

Step 3

if (environment.production) {
  enableProdMode();
}



***Topic B: Adding Dependencies for the Server App - Exercise-Add the server app to our Angular CLI configuration***

Step 4

import { ModuleMapLoaderModule } from '@nguniversal/module-map-ngfactory-loader';

Step 5

imports: [
  ...
  ModuleMapLoaderModule,
],



***Topic C: Adding run scripts to package.json - Exercise-Add npm scripts***

Step 3

"build": "npm run build:browser && npm run build:server",
"build:browser": "ng build --prod --app browser",
"build:server": "ng build --prod --app server --output-hashing=false",



***Topic D: Implementing a Web Server - Exercise-Create the server.ts file***

Step 2

import * as express from 'express';
import { join } from 'path';
import { ngExpressEngine } from '@nguniversal/express-engine';
import { provideModuleMap } from '@nguniversal/module-map-ngfactory-loader';

Step 3

const PORT = process.env.PORT || 8080;
const staticRoot = join(process.cwd(), 'dist', 'browser');
const { AppServerModuleNgFactory, LAZY_MODULE_MAP } = require('./dist/server/main.bundle');
const app = express();

Step 4

app.engine('html', ngExpressEngine({
  bootstrap: AppServerModuleNgFactory,
  providers: [
    provideModuleMap(LAZY_MODULE_MAP)
  ]
}));

Step 5

app.set('view engine', 'html');
app.set('views', staticRoot);
app.get('*.*', express.static(staticRoot));
app.get('*', (req, res) => res.render('index', { req }));

Step 6

app.listen(PORT, () => console.log(`Server listening on http://localhost:${PORT}`));



***Topic D: Implementing a Web Server - Exercise-Add the npm script to package.json***

Step 3

"start": "ts-node ./server",



***Topic E: Adding dynamic metadata - Exercise-Create the UiService***

Step 4

private appColor = '#C3002F';
private appImage = '/assets/logo.svg';
private appTitle = 'Angular Social';
private appDescription = 'Angular Social is a Social Networking App built in Angular';

Step 5

import { Meta, Title } from '@angular/platform-browser';

Step 6

constructor(private titleService: Title, private metaService: Meta){}

Step 7

public setMetaData(config) {}

Step 8

// Get the description of the config, or use the default App Description
const description = config.description || this.appDescription

// Get the title of the config and append the App Title, or just use the App Title
const title = config.title ? `${config.title} - ${this.appTitle}` : this.appTitle;

// Set the Application Title
this.titleService.setTitle(title);

// Add the Application Meta tags
this.metaService.addTags([
   { name: 'description', content: description },
   { name: 'theme-color', content: this.appColor },
   { name: 'twitter:card', content: 'summary' },
   { name: 'twitter:image', content: this.appImage },
   { name: 'twitter:title', content: title },
   { name: 'twitter:description', content: description },
   { name: 'apple-mobile-web-app-capable', content: 'yes' },
   { name: 'apple-mobile-web-app-status-bar-style', content: 'black-translucent' },
   { name: 'apple-mobile-web-app-title', content: title },
   { name: 'apple-touch-startup-image', content: this.appImage },
   { property: 'og:title', content: title },
   { property: 'og:description', content: description },
   { property: 'og:image', content: this.appImage },
]);



***Topic E: Adding dynamic metadata - Exercise-Add the metadata to the PostsComponent***

Step 2

import { UiService } from '../../../ui/services/ui.service';

Step 3

constructor(private route: ActivatedRoute, private uiService: UiService) { }

Step 4

setMetaData(posts) {}

Step 5

const { itemsPerPage, itemsTotal } = posts['counters']
const description = `Showing ${itemsPerPage} from ${itemsTotal} posts`
const title = 'Posts List'
this.uiService.setMetaData({ description, title })
return posts;

Step 6

.map(data => this.setMetaData(data['posts']))



***Topic E: Adding dynamic metadata - Exercise-Add the metadata to the ProfileComponent***

Step 2

import { UiService } from '../../../ui/services/ui.service';

Step 3

constructor(private route: ActivatedRoute, private uiService: UiService) { }

Step 4

setMetaData(profile) {}

Step 5

const { fullName, posts } = profile;
const description = `${fullName} posted ${posts.length} posts.`;
const title = `Posts by ${fullName}`;
this.uiService.setMetaData({ description, title });
return profile;

Step 6

this.route.data
   .map(data => this.setMetaData(data['profile']))
   .subscribe((result: any) => this.profile = result)



